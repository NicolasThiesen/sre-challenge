- name: Pegando os outputs da Stack
  local_action: cloudformation_facts
                stack_name="baseInfra"
  register: stack

- name: "Pegando os ids das instâncias do Back-End"
  raw: aws ec2 describe-instances --filters 'Name=tag:Name,Values=BackEndApp' \
      --output json --query 'Reservations[*].Instances[*].InstanceId'
  register: ids

- name: "Instalando o mysql em uma instância de back-end"
  raw:  aws ssm send-command \
        --instance-ids "{{ ids[0] }}" \
        --document-name "AWS-RunShellScript" \
        --parameters commands="yum update && yum install -y mysql"

- name: "Rodando Script na instância back-end para criar o DB e a Table"
  raw: aws ssm send-command \
        --instance-ids "{{ ids[0] }}" \
        --document-name "AWS-RunShellScript" \
        --parameters commands='mysql -u {{ masterUserName }} -p{{ masterUserPassword }} -h {{ stack.ansible_facts.cloudformation.baseInfra.stack_outputs.RdsURL }} -e "create database preferences; use preferences; create table preferences (id INT AUTO_INCREMENT PRIMARY KEY, ip VARCHAR(20), preference VARCHAR(10));"'

- name: "Logando no Repo"
  raw: aws ecr get-login-password --region {{ region }} | docker login --username AWS --password-stdin {{ stack.ansible_facts.cloudformation.baseInfra.stack_outputs.RepoURI }}

- name: "Buildando Back-End"
  raw:  docker build -t backapp ../back/

- name: "Tag local back-end image para o Repo Remoto"
  raw: docker tag backapp:latest {{ stack.ansible_facts.cloudformation.baseInfra.stack_outputs.BackRepo }}

- name: "Dando push na imagem back-end"
  raw: docker push {{ stack.ansible_facts.cloudformation.baseInfra.stack_outputs.BackRepo }}

- name: "Buildando Front-End"
  raw: docker build -t frontapp ../front/

- name: "Tag local front-end image para o Repo Remoto"
  raw: docker tag frontapp:latest {{ stack.ansible_facts.cloudformation.baseInfra.stack_outputs.FrontRepo }}

- name: "Dando push na imagem front-end"
  raw: docker push {{ stack.ansible_facts.cloudformation.baseInfra.stack_outputs.FrontRepo }}