
Description:  Template to provide all infraestruture 

Parameters:
  KeyPair:
   Type: String
   Description: The key pair name to associate to instances
  region:
    Type: String
    Description: The region
  zone1: 
    Type: String
    Description: Zone 1 
  zone2: 
    Type: String
    Description: Zone 2
  AMI: 
    Type: String
    Description: AMI for the instance
  instanceType: 
    Type: String
    Description: The type of the instance
  masterUserName:
    Type: String
    Description: The username for the MySql
  masterUserPassword:
    Type: String
    Description: The password for the MySql
  maxScalingSize:
    Type: String
    Description: The maximum of instance on Auto Scaling Group
  minScalingSize:
    Type: String
    Description: The minimum of instance on Auto Scaling Group
Resources:
# VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: "VPC"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: "IG VPC"

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Join [ "", [ !Ref region, !Ref zone1 ] ] 
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: VPC Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Join ["", [!Ref region, !Ref zone2 ]]
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: VPC Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Join [ "", [ !Ref region, !Ref zone1 ] ] 
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: VPC Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Join ["", [!Ref region, !Ref zone2 ]]
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: VPC Private Subnet (AZ2)

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: VPC Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: VPC Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: VPC Private Routes (AZ2)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

# Security Groups
  BackEndSg:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: for the Back-End instances
      GroupName: BackEndSG
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 3333
          ToPort: 3333
          SourceSecurityGroupId: !Ref ALBSgBack
        - IpProtocol: tcp
          FromPort: 31000
          ToPort: 61000
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  MYSQLSg:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: for MySQL datadabase instance 
      GroupName: MYSQLSg
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref BackEndSg
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
  WebAppSg:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: for web instances 
      GroupName: WebAppSg
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSgFront
        - IpProtocol: tcp
          FromPort: 31000
          ToPort: 61000
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
  ALBSgFront:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: ALB security group
      GroupName: sgALBFront
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
  ALBSgBack:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: ALB security group
      GroupName: sgALBBack
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 3333
          ToPort: 3333
          SourceSecurityGroupId: !Ref WebAppSg
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC


# RDS
  rdsSub:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription:  RDS subnet
      DBSubnetGroupName: RDSsub
      SubnetIds: 
       - !Ref PrivateSubnet1
       - !Ref PrivateSubnet2

  rdsDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass:  !Join [".", [ "db", !Ref instanceType ]]
      AllocatedStorage: 100
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: false
      BackupRetentionPeriod: 0
      DBInstanceIdentifier: "RDSInstance"
      VPCSecurityGroups:
        - Ref: MYSQLSg
      Engine: mysql
      MasterUsername: !Ref masterUserName
      MasterUserPassword: !Ref masterUserPassword
      MultiAZ: true  
      PubliclyAccessible: true
      DBSubnetGroupName: 
        Ref: rdsSub


# Load Balancer Front
  LoadBalancerFront:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups: [!Ref ALBSgFront]
      Subnets:
       - !Ref PublicSubnet1
       - !Ref PublicSubnet2
  LoadBalancerListenerFront:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupFront
      LoadBalancerArn: !Ref LoadBalancerFront
      Port: 80
      Protocol: HTTP
  TargetGroupFront:
    DependsOn: "LoadBalancerFront"
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      Name: !Join [ "-", [ "ALB", "Port" , 80 ] ]
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 10
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "60"

# Load Balancer Back
  LoadBalancerBack:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      SecurityGroups: [!Ref ALBSgBack]
      Subnets:
       - !Ref PrivateSubnet1
       - !Ref PrivateSubnet2
  LoadBalancerListenerBack:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupBack
      LoadBalancerArn: !Ref LoadBalancerBack
      Port: 3333
      Protocol: HTTP
  TargetGroupBack:
    DependsOn: "LoadBalancerBack"
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      Name: !Join [ "-", [ "ALB", "Port" , 3333 ] ]
      Port: 3333
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 10
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "60"

# ECSs
  ECSClusterFrontEnd:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: "ClusterFrontEnd"
  ECSClusterBackEnd:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: "ClusterBackEnd"

# ECR Repository
  ECRFront:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "frontapp"
  ECRBack:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "backapp"

# Auto Scaling
  ECSAutoScalingGroupFront:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: [!Ref PublicSubnet1, !Ref PublicSubnet2]
      TargetGroupARNs: 
      - !Ref TargetGroupFront
      LaunchConfigurationName: !Ref 'ContainerInstancesFront'
      MinSize: !Ref maxScalingSize
      MaxSize: !Ref minScalingSize
      DesiredCapacity: !Ref minScalingSize
      Tags: 
      - Key: Name
        Value: WebApp
        PropagateAtLaunch: 'true'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'
  ECSAutoScalingGroupBack:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
      TargetGroupARNs: 
      - !Ref TargetGroupBack
      LaunchConfigurationName: !Ref 'ContainerInstancesBack'
      MinSize: !Ref maxScalingSize
      MaxSize: !Ref minScalingSize
      DesiredCapacity: !Ref minScalingSize
      Tags: 
      - Key: Name
        Value: BackEndApp
        PropagateAtLaunch: 'true'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'



# Launch Config Front
  ContainerInstancesFront:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AMI
      SecurityGroups: [!Ref WebAppSg]
      InstanceType: !Ref instanceType
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      KeyName: !Ref KeyPair
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSClusterFrontEnd} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroupFront --region ${AWS::Region}


# Launch Config Back
  ContainerInstancesBack:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AMI
      SecurityGroups: [!Ref BackEndSg]
      InstanceType: !Ref instanceType
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      KeyName: !Ref KeyPair
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSClusterBackEnd} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroupBack --region ${AWS::Region}

# IAM ROLES
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['ecs:CreateCluster', 'ecs:DeregisterContainerInstance', 'ecs:DiscoverPollEndpoint',
              'ecs:Poll', 'ecs:RegisterContainerInstance', 'ecs:StartTelemetrySession',
              'ecs:Submit*', 'logs:CreateLogStream', 'logs:PutLogEvents']
            Resource: '*'
      - PolicyName: "SSM"
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - ssm:DescribeAssociation
              - ssm:GetDeployablePatchSnapshotForInstance
              - ssm:GetDocument
              - ssm:DescribeDocument
              - ssm:GetManifest
              - ssm:GetParameter
              - ssm:GetParameters
              - ssm:ListAssociations
              - ssm:ListInstanceAssociations
              - ssm:PutInventory
              - ssm:PutComplianceItems
              - ssm:PutConfigurePackageResult
              - ssm:UpdateAssociationStatus
              - ssm:UpdateInstanceAssociationStatus
              - ssm:UpdateInstanceInformation
            Resource: "*"
          - Effect: Allow
            Action:
              - ssmmessages:CreateControlChannel
              - ssmmessages:CreateDataChannel
              - ssmmessages:OpenControlChannel
              - ssmmessages:OpenDataChannel
            Resource: "*"
          - Effect: Allow
            Action:
              - ec2messages:AcknowledgeMessage
              - ec2messages:DeleteMessage
              - ec2messages:FailMessage
              - ec2messages:GetEndpoint
              - ec2messages:GetMessages
              - ec2messages:SendReply
            Resource: "*"
  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['application-autoscaling:*', 'cloudwatch:DescribeAlarms', 'cloudwatch:PutMetricAlarm',
              'ecs:DescribeServices', 'ecs:UpdateService']
            Resource: '*'
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'EC2Role']


Outputs:
  Region:
    Description: The region on the templates are
    Value: !Ref region
    Export:
      Name: "baseInfra-Region"
  ClusterFront:
    Description: "The front-end cluster"
    Value: !Ref ECSClusterFrontEnd
    Export:
      Name: "baseInfra-ECSClusterFrontEnd"
  ClusterBack:
    Description: "The back-end cluster"
    Value: !Ref ECSClusterBackEnd
    Export:
      Name: "baseInfra-ECSClusterBackEnd"
  TargetGroupFront:
    Description: "The front-end TG"
    Value: !Ref TargetGroupFront
    Export:
      Name: "baseInfra-TargetGroupFront"
  TargetGroupBack:
    Description: "The back-end TG"
    Value: !Ref TargetGroupBack
    Export:
      Name: "baseInfra-TargetGroupBack"
  RepoURI:
    Description: "The front-end Repository"
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com"
    Export:
      Name: "baseInfra-RepoURI"
  FrontRepo:
    Description: "The front-end Repository"
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRFront}:latest"
    Export:
      Name: "baseInfra-ECRFront"
  BackRepo:
    Description: "The back-end Repository"
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRBack}:latest"
    Export:
      Name: "baseInfra-ECRBack"
  LoadBalancerUrlFront:
    Description: The URL of the ALB Front
    Value: !GetAtt LoadBalancerFront.DNSName
  LoadBalancerUrlBack:
    Description: The URL of the ALB Back
    Value: !GetAtt LoadBalancerBack.DNSName
  RdsURL: 
    Description: The URL from RDS
    Value: !GetAtt rdsDBInstance.Endpoint.Address