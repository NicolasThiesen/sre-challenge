Description:  Template to provide Task Definitions and the Services 
  
Resources:
# Cloud Watch
  CloudwatchLogsGroupFront:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: ECSLogGroupFront
      RetentionInDays: 14
  CloudwatchLogsGroupBack:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: ECSLogGroupBack
      RetentionInDays: 14

# Task Definition Front-End
  TaskDefinitionFront:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: "TaskFront"
      ExecutionRoleArn: !Ref ECSServiceRole
      ContainerDefinitions:
      - Name: app-front
        Cpu: '10'
        Command: ["node", "index.js"]
        Essential: 'true'
        Image:  !ImportValue "baseInfra-ECRFront"
        Memory: '300'
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref 'CloudwatchLogsGroupFront'
            awslogs-region: !ImportValue "baseInfra-Region"
            awslogs-stream-prefix: ecs-demo-app
        MountPoints:
        - ContainerPath: /usr/app
          SourceVolume: my-vol
        PortMappings:
        - ContainerPort: 80
      Volumes:
      - Name: my-vol

# Service Back-End
  TaskDefinitionBack:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: "TaskBack"
      ExecutionRoleArn: !Ref ECSServiceRole
      ContainerDefinitions:
      - Name: app-back
        Cpu: '10'
        Command: ["node", "index.js"]
        Essential: 'true'
        Image: !ImportValue "baseInfra-ECRBack"
        Memory: '300'
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref 'CloudwatchLogsGroupBack'
            awslogs-region: !ImportValue "baseInfra-Region"
            awslogs-stream-prefix: ecs-demo-app
        MountPoints:
        - ContainerPath: /usr/app
          SourceVolume: my-vol
        PortMappings:
        - ContainerPort: 3000
      Volumes:
      - Name: my-vol

# Service Front-End
  serviceFront:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !ImportValue "baseInfra-ECSClusterFrontEnd"
      DesiredCount: '1'
      LaunchType: "EC2"
      LoadBalancers:
      - ContainerName: app-front
        ContainerPort: '80'
        TargetGroupArn: !ImportValue "baseInfra-TargetGroupFront"
      Role: !Ref 'ECSServiceRole'
      TaskDefinition: !Ref TaskDefinitionFront

# Service Back-End
  serviceBack:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !ImportValue "baseInfra-ECSClusterBackEnd"
      DesiredCount: '1'
      LaunchType: "EC2"
      LoadBalancers:
      - ContainerName: app-back
        ContainerPort: '3000'
        TargetGroupArn: !ImportValue "baseInfra-TargetGroupBack"
      Role: !Ref 'ECSServiceRole'
      TaskDefinition: !Ref TaskDefinitionBack

# IAM Roles
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['elasticloadbalancing:DeregisterInstancesFromLoadBalancer', 'elasticloadbalancing:DeregisterTargets',
              'elasticloadbalancing:Describe*', 'elasticloadbalancing:RegisterInstancesWithLoadBalancer',
              'elasticloadbalancing:RegisterTargets', 'ec2:Describe*', 'ec2:AuthorizeSecurityGroupIngress',"ecr:GetAuthorizationToken"]
            Resource: '*'